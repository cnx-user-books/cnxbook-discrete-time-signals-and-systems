<document xmlns="http://cnx.rice.edu/cnxml">
  <title>Discrete-time Systems</title>
<metadata xmlns:md="http://cnx.rice.edu/mdml">
  <md:content-id>m57604</md:content-id>
  <md:title>Discrete-time Systems</md:title>
  <md:abstract/>
  <md:uuid>ca0590f6-a180-4540-95f9-db484cac49b5</md:uuid>
</metadata>

<content>
    <para xmlns:m="http://www.w3.org/1998/Math/MathML" id="delete_me">Discrete-time signals are mathematical entities; in particular, they are functions with an independent time variable and a dependent variable that typically represents some kind of real-world quantity of interest. But as interesting as a signal may be on its own, engineers usually want to <emphasis effect="italics">do</emphasis> something to it. This kind of action is what discrete-time systems are all about. A <term><emphasis>discrete-time system</emphasis></term> is a mathematical transformation that maps a discrete-time input signal (usually designated <m:math><m:semantics><m:mi>x</m:mi><m:annotation encoding="math/tex">x</m:annotation></m:semantics></m:math>) to a discrete-time output signal (usually designated <m:math><m:semantics><m:mi>y</m:mi><m:annotation encoding="math/tex">y</m:annotation></m:semantics></m:math>). In other words, it takes an input signal and modifies it to produce an output signal:
</para><figure xmlns:m="http://www.w3.org/1998/Math/MathML" id="NAME"><media id="NAME-plot" alt="Image">
        <image mime-type="image/png" src="../../media/systeminout.png" width="400"/>
        <image mime-type="image/png" for="pdf" src="../../media/systeminout.png" print-width="250pt"/>
      </media>
      
    <caption>System <m:math><m:semantics><m:mrow class="MJX-TeXAtom-ORD"><m:mi class="MJX-tex-caligraphic" mathvariant="script">H</m:mi></m:mrow><m:annotation encoding="math/tex">\mathcal{H}</m:annotation></m:semantics></m:math> takes takes a discrete time signal <m:math><m:semantics><m:mi>x</m:mi><m:annotation encoding="math/tex">x</m:annotation></m:semantics></m:math> as an input and produces an output <m:math><m:semantics><m:mi>y</m:mi><m:annotation encoding="math/tex">y</m:annotation></m:semantics></m:math>.</caption></figure><para id="idm240799286112">
There is no end to the possibilities of what a system could do. Systems might be trivially dull (e.g., produce an output of <m:math xmlns:m="http://www.w3.org/1998/Math/MathML"><m:semantics><m:mn>0</m:mn><m:annotation encoding="math/tex">0</m:annotation></m:semantics></m:math> regardless of the input) or incredibly complex (e.g., isolate a single voice speaking in a crowd). Here are a few examples of systems:</para>
    <list id="idm240799284304" list-type="bulleted">
      <item>A speech recognition system converts acoustic waves of speech into text</item>
      <item>A radar system transforms the received radar pulse to estimate the position and velocity of targets</item>
      <item>A functional magnetic resonance imaging (fMRI) system transforms measurements of electron spin into voxel-by-voxel estimates of brain activity</item>
      <item>A 30 day moving average smooths out the day-to-day variability in a stock price </item>
    </list>
    <section id="idm240799281792">
      <title>Signal Length and Systems</title>
      <para id="idm240799281280">Recall that discrete-time signals can be broadly divided into two classes based upon their length: they are either infinite-length or finite-length (and recall also that periodic signals, though infinite in length, can be viewed as finite-length signals when we take a single period into account). Likewise, discrete-time systems are also finite- or infinite-length, depending on the kind of input signals they take. Finite-length systems take in a finite-length input and produce a finite-length output (of the same length), with infinite-length systems doing the same for infinite-length signals.</para>
    </section>
    <section id="idm240799280416">
      <title>Examples of Discrete-time Systems</title>
      <para id="idm240799279904">So a system takes an input signal <m:math xmlns:m="http://www.w3.org/1998/Math/MathML"><m:semantics><m:mi>x</m:mi><m:annotation encoding="math/tex">x</m:annotation></m:semantics></m:math> and produces an output signal <m:math xmlns:m="http://www.w3.org/1998/Math/MathML"><m:semantics><m:mi>y</m:mi><m:annotation encoding="math/tex">y</m:annotation></m:semantics></m:math>. How does this look, mathematically? Below are several examples of systems and their mathematical expression:</para>
      <list id="idm240799276736" list-type="bulleted">
        <item>
Identity: <m:math xmlns:m="http://www.w3.org/1998/Math/MathML"><m:semantics><m:mrow><m:mi>y</m:mi><m:mo stretchy="false">[</m:mo><m:mi>n</m:mi><m:mo stretchy="false">]</m:mo><m:mo>=</m:mo><m:mi>x</m:mi><m:mo stretchy="false">[</m:mo><m:mi>n</m:mi><m:mo stretchy="false">]</m:mo></m:mrow><m:annotation encoding="math/tex">y[n] = x[n]</m:annotation></m:semantics></m:math></item>
        <item>
Scaling: <m:math xmlns:m="http://www.w3.org/1998/Math/MathML"><m:semantics><m:mrow><m:mi>y</m:mi><m:mo stretchy="false">[</m:mo><m:mi>n</m:mi><m:mo stretchy="false">]</m:mo><m:mo>=</m:mo><m:mn>2</m:mn><m:mspace width="thinmathspace"/><m:mi>x</m:mi><m:mo stretchy="false">[</m:mo><m:mi>n</m:mi><m:mo stretchy="false">]</m:mo></m:mrow><m:annotation encoding="math/tex">y[n] = 2\, x[n]</m:annotation></m:semantics></m:math></item>
        <item>
Offset: <m:math xmlns:m="http://www.w3.org/1998/Math/MathML"><m:semantics><m:mrow><m:mi>y</m:mi><m:mo stretchy="false">[</m:mo><m:mi>n</m:mi><m:mo stretchy="false">]</m:mo><m:mo>=</m:mo><m:mi>x</m:mi><m:mo stretchy="false">[</m:mo><m:mi>n</m:mi><m:mo stretchy="false">]</m:mo><m:mo>+</m:mo><m:mn>2</m:mn></m:mrow><m:annotation encoding="math/tex">y[n] = x[n]+2</m:annotation></m:semantics></m:math></item>
        <item>
Square signal: <m:math xmlns:m="http://www.w3.org/1998/Math/MathML"><m:semantics><m:mrow><m:mi>y</m:mi><m:mo stretchy="false">[</m:mo><m:mi>n</m:mi><m:mo stretchy="false">]</m:mo><m:mo>=</m:mo><m:mo stretchy="false">(</m:mo><m:mi>x</m:mi><m:mo stretchy="false">[</m:mo><m:mi>n</m:mi><m:mo stretchy="false">]</m:mo><m:msup><m:mo stretchy="false">)</m:mo><m:mn>2</m:mn></m:msup></m:mrow><m:annotation encoding="math/tex">y[n] = (x[n])^2</m:annotation></m:semantics></m:math></item>
        <item>Shift: <m:math xmlns:m="http://www.w3.org/1998/Math/MathML"><m:semantics><m:mrow><m:mi>y</m:mi><m:mo stretchy="false">[</m:mo><m:mi>n</m:mi><m:mo stretchy="false">]</m:mo><m:mo>=</m:mo><m:mi>x</m:mi><m:mo stretchy="false">[</m:mo><m:mi>n</m:mi><m:mo>+</m:mo><m:mi>m</m:mi><m:mo stretchy="false">]</m:mo><m:mo>,</m:mo><m:mi>m</m:mi><m:mo>∈</m:mo><m:mrow class="MJX-TeXAtom-ORD"><m:mi mathvariant="double-struck">Z</m:mi></m:mrow></m:mrow><m:annotation encoding="math/tex">y[n] = x[n+m],m\in \mathbb{Z}</m:annotation></m:semantics></m:math></item>
        <item>Decimate: <m:math xmlns:m="http://www.w3.org/1998/Math/MathML"><m:semantics><m:mrow><m:mi>y</m:mi><m:mo stretchy="false">[</m:mo><m:mi>n</m:mi><m:mo stretchy="false">]</m:mo><m:mo>=</m:mo><m:mi>x</m:mi><m:mo stretchy="false">[</m:mo><m:mn>2</m:mn><m:mi>n</m:mi><m:mo stretchy="false">]</m:mo></m:mrow><m:annotation encoding="math/tex">y[n] = x[2n]</m:annotation></m:semantics></m:math></item>
        <item>Square-time: <m:math xmlns:m="http://www.w3.org/1998/Math/MathML"><m:semantics><m:mrow><m:mi>y</m:mi><m:mo stretchy="false">[</m:mo><m:mi>n</m:mi><m:mo stretchy="false">]</m:mo><m:mo>=</m:mo><m:mi>x</m:mi><m:mo stretchy="false">[</m:mo><m:msup><m:mi>n</m:mi><m:mn>2</m:mn></m:msup><m:mo stretchy="false">]</m:mo></m:mrow><m:annotation encoding="math/tex">y[n] = x[n^2]</m:annotation></m:semantics></m:math></item>
        <item>Moving average (combines shift, sum, and scale): <m:math xmlns:m="http://www.w3.org/1998/Math/MathML"><m:semantics><m:mrow><m:mi>y</m:mi><m:mo stretchy="false">[</m:mo><m:mi>n</m:mi><m:mo stretchy="false">]</m:mo><m:mo>=</m:mo><m:mfrac><m:mn>1</m:mn><m:mn>2</m:mn></m:mfrac><m:mo stretchy="false">(</m:mo><m:mi>x</m:mi><m:mo stretchy="false">[</m:mo><m:mi>n</m:mi><m:mo stretchy="false">]</m:mo><m:mo>+</m:mo><m:mi>x</m:mi><m:mo stretchy="false">[</m:mo><m:mi>n</m:mi><m:mo>−</m:mo><m:mn>1</m:mn><m:mo stretchy="false">]</m:mo><m:mo stretchy="false">)</m:mo></m:mrow><m:annotation encoding="math/tex">y[n] = \frac{1}{2}(x[n]+x[n-1])</m:annotation></m:semantics></m:math></item>
        <item>Recursive average: <m:math xmlns:m="http://www.w3.org/1998/Math/MathML"><m:semantics><m:mrow><m:mi>y</m:mi><m:mo stretchy="false">[</m:mo><m:mi>n</m:mi><m:mo stretchy="false">]</m:mo><m:mo>=</m:mo><m:mi>x</m:mi><m:mo stretchy="false">[</m:mo><m:mi>n</m:mi><m:mo stretchy="false">]</m:mo><m:mo>+</m:mo><m:mi>α</m:mi><m:mspace width="thinmathspace"/><m:mi>y</m:mi><m:mo stretchy="false">[</m:mo><m:mi>n</m:mi><m:mo>−</m:mo><m:mn>1</m:mn><m:mo stretchy="false">]</m:mo></m:mrow><m:annotation encoding="math/tex">y[n] =  x[n] + \alpha\,y[n-1]</m:annotation></m:semantics></m:math></item>
      </list>
      <para id="eip-981">So systems take input signals and produce output signals. We have seen some examples of systems, and have also introduced a broad categorization of systems as either operating on finite- or infinite length signals.</para>
    </section>
  </content>
</document>